

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.SimpleBar = factory());
}(this, (function () { 'use strict';

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _global = createCommonjsModule(function (module) {
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    : Function('return this')();
  if (typeof __g == 'number') __g = global; 
  });

  var document$1 = _global.document;
  var is = _isObject(document$1) && _isObject(document$1.createElement);
  var _domCreate = function (it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });


  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;

  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {  }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var id = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.5.7' };
  if (typeof __e == 'number') __e = core; 
  });
  var _core_1 = _core.version;

  var _redefine = createCommonjsModule(function (module) {
  var SRC = _uid('src');
  var TO_STRING = 'toString';
  var $toString = Function[TO_STRING];
  var TPL = ('' + $toString).split(TO_STRING);

  _core.inspectSource = function (it) {
    return $toString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === _global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      _hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      _hide(O, key, val);
    }
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
  });

  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _library = false;

  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});

  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode: _library ? 'pure' : 'global',
    copyright: 'Â© 2018 Denis Pushkarev (zloirock.ru)'
  });
  });

  var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');

  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
  };

  $exports.store = store;
  });

  var _fixReWks = function (KEY, length, exec) {
    var SYMBOL = _wks(KEY);
    var fns = exec(_defined, SYMBOL, ''[KEY]);
    var strfn = fns[0];
    var rxfn = fns[1];
    if (_fails(function () {
      var O = {};
      O[SYMBOL] = function () { return 7; };
      return ''[KEY](O) != 7;
    })) {
      _redefine(String.prototype, KEY, strfn);
      _hide(RegExp.prototype, SYMBOL, length == 2
        ? function (string, arg) { return rxfn.call(string, this, arg); }
        : function (string) { return rxfn.call(string, this); }
      );
    }
  };

  _fixReWks('replace', 2, function (defined, REPLACE, $replace) {
    return [function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    }, $replace];
  });

  var dP$1 = _objectDp.f;
  var FProto = Function.prototype;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name';

  NAME in FProto || _descriptors && dP$1(FProto, NAME, {
    configurable: true,
    get: function () {
      try {
        return ('' + this).match(nameRE)[1];
      } catch (e) {
        return '';
      }
    }
  });

  _fixReWks('match', 1, function (defined, MATCH, $match) {
    return [function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, $match];
  });

  var UNSCOPABLES = _wks('unscopables');
  var ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
  var _addToUnscopables = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };

  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };

  var _iterators = {};

  var toString = {}.toString;

  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  };


  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };



  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };


  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function () {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      out = (own ? target : source)[key];
      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      if (target) _redefine(target, key, out, type & $export.U);
      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  _global.core = _core;
  $export.F = 1;   
  $export.G = 2;   
  $export.S = 4;   
  $export.P = 8;   
  $export.B = 16;  
  $export.W = 32;  
  $export.U = 64;  
  $export.R = 128; 
  var _export = $export;

  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };


  var min = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; 
  };

  var max = Math.max;
  var min$1 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };




  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var shared = _shared('keys');

  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');




  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
    return O;
  };

  var document$2 = _global.document;
  var _html = document$2 && document$2.documentElement;




  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () {  };
  var PROTOTYPE$1 = 'prototype';

  var createDict = function () {
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; 
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
    return createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var def = _objectDp.f;

  var TAG = _wks('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };

  var IteratorPrototype = {};

  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };


  var _toObject = function (it) {
    return Object(_defined(it));
  };



  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

  var ITERATOR = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); 
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () { return this; };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS: return function keys() { return new Constructor(this, kind); };
        case VALUES: return function values() { return new Constructor(this, kind); };
      } return function entries() { return new Constructor(this, kind); };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        _setToStringTag(IteratorPrototype, TAG, true);
        if (typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() { return $native.call(this); };
    }
    if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {
      _hide(proto, ITERATOR, $default);
    }
    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); 
    this._i = 0;                   
    this._k = kind;                
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values');

  _iterators.Arguments = _iterators.Array;

  _addToUnscopables('keys');
  _addToUnscopables('values');
  _addToUnscopables('entries');

  var ITERATOR$1 = _wks('iterator');
  var TO_STRING_TAG = _wks('toStringTag');
  var ArrayValues = _iterators.Array;

  var DOMIterables = {
    CSSRuleList: true, 
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true, 
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true, 
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };

  for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
    var NAME$1 = collections[i];
    var explicit = DOMIterables[NAME$1];
    var Collection = _global[NAME$1];
    var proto = Collection && Collection.prototype;
    var key;
    if (proto) {
      if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
      if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME$1);
      _iterators[NAME$1] = ArrayValues;
      if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
    }
  }


  var _iterCall = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject(ret.call(iterator));
      throw e;
    }
  };


  var ITERATOR$2 = _wks('iterator');
  var ArrayProto$1 = Array.prototype;

  var _isArrayIter = function (it) {
    return it !== undefined && (_iterators.Array === it || ArrayProto$1[ITERATOR$2] === it);
  };

  var _createProperty = function (object, index, value) {
    if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
    else object[index] = value;
  };


  var TAG$1 = _wks('toStringTag');
  var ARG = _cof(function () { return arguments; }()) == 'Arguments';

  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) {  }
  };

  var _classof = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
      : ARG ? _cof(O)
      : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var ITERATOR$3 = _wks('iterator');

  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$3]
      || it['@@iterator']
      || _iterators[_classof(it)];
  };

  var ITERATOR$4 = _wks('iterator');
  var SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR$4]();
    riter['return'] = function () { SAFE_CLOSING = true; };
  } catch (e) {  }

  var _iterDetect = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
      var arr = [7];
      var iter = arr[ITERATOR$4]();
      iter.next = function () { return { done: safe = true }; };
      arr[ITERATOR$4] = function () { return iter; };
      exec(arr);
    } catch (e) {  }
    return safe;
  };

  _export(_export.S + _export.F * !_iterDetect(function (iter) { }), 'Array', {
    from: function from(arrayLike ) {
      var O = _toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var index = 0;
      var iterFn = core_getIteratorMethod(O);
      var length, result, step, iterator;
      if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = _toLength(O.length);
        for (result = new C(length); length > index; index++) {
          _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
      result.length = index;
      return result;
    }
  });

  var f$1 = Object.getOwnPropertySymbols;

  var _objectGops = {
  	f: f$1
  };

  var f$2 = {}.propertyIsEnumerable;

  var _objectPie = {
  	f: f$2
  };






  var $assign = Object.assign;

  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {};
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) { B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) { 
    var T = _toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;
    while (aLen > index) {
      var S = _iobject(arguments[index++]);
      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    } return T;
  } : $assign;



  _export(_export.S + _export.F, 'Object', { assign: _objectAssign });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var scrollbarWidth = createCommonjsModule(function (module, exports) {
  (function (root, factory) {
  	{
  		module.exports = factory();
  	}
  }(commonjsGlobal, function () {

  	function scrollbarWidth() {
  		if (typeof document === 'undefined') {
  			return 0
  		}

  		var
  			body = document.body,
  			box = document.createElement('div'),
  			boxStyle = box.style,
  			width;

  		boxStyle.position = 'absolute';
  		boxStyle.top = boxStyle.left = '-9999px';
  		boxStyle.width = boxStyle.height = '100px';
  		boxStyle.overflow = 'scroll';

  		body.appendChild(box);

  		width = box.offsetWidth - box.clientWidth;

  		body.removeChild(box);

  		return width;
  	}

  	return scrollbarWidth;
  }));
  });


  var FUNC_ERROR_TEXT = 'Expected a function';

  var NAN = 0 / 0;

  var symbolTag = '[object Symbol]';

  var reTrim = /^\s+|\s+$/g;

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  var reIsBinary = /^0b[01]+$/i;

  var reIsOctal = /^0o[0-7]+$/i;

  var freeParseInt = parseInt;

  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  var root = freeGlobal || freeSelf || Function('return this')();

  var objectProto = Object.prototype;

  var objectToString = objectProto.toString;

  var nativeMax = Math.max,
      nativeMin = Math.min;

  var now = function() {
    return root.Date.now();
  };

  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          result = wait - timeSinceLastCall;

      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var lodash_throttle = throttle;

  var MapShim = (function () {
      if (typeof Map !== 'undefined') {
          return Map;
      }

      function getIndex(arr, key) {
          var result = -1;

          arr.some(function (entry, index) {
              if (entry[0] === key) {
                  result = index;

                  return true;
              }

              return false;
          });

          return result;
      }

      return (function () {
          function anonymous() {
              this.__entries__ = [];
          }

          var prototypeAccessors = { size: { configurable: true } };

          prototypeAccessors.size.get = function () {
              return this.__entries__.length;
          };

          anonymous.prototype.get = function (key) {
              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];

              return entry && entry[1];
          };

          anonymous.prototype.set = function (key, value) {
              var index = getIndex(this.__entries__, key);

              if (~index) {
                  this.__entries__[index][1] = value;
              } else {
                  this.__entries__.push([key, value]);
              }
          };

          anonymous.prototype.delete = function (key) {
              var entries = this.__entries__;
              var index = getIndex(entries, key);

              if (~index) {
                  entries.splice(index, 1);
              }
          };

          anonymous.prototype.has = function (key) {
              return !!~getIndex(this.__entries__, key);
          };

          anonymous.prototype.clear = function () {
              this.__entries__.splice(0);
          };

          anonymous.prototype.forEach = function (callback, ctx) {
              var this$1 = this;
              if ( ctx === void 0 ) ctx = null;

              for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
                  var entry = list[i];

                  callback.call(ctx, entry[1], entry[0]);
              }
          };

          Object.defineProperties( anonymous.prototype, prototypeAccessors );

          return anonymous;
      }());
  })();

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  var global$1 = (function () {
      if (typeof global !== 'undefined' && global.Math === Math) {
          return global;
      }

      if (typeof self !== 'undefined' && self.Math === Math) {
          return self;
      }

      if (typeof window !== 'undefined' && window.Math === Math) {
          return window;
      }

      return Function('return this')();
  })();

  var requestAnimationFrame$1 = (function () {
      if (typeof requestAnimationFrame === 'function') {
          return requestAnimationFrame.bind(global$1);
      }

      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
  })();

  var trailingTimeout = 2;

  var throttle$1 = function (callback, delay) {
      var leadingCall = false,
          trailingCall = false,
          lastCallTime = 0;

      function resolvePending() {
          if (leadingCall) {
              leadingCall = false;

              callback();
          }

          if (trailingCall) {
              proxy();
          }
      }

      function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
      }

      function proxy() {
          var timeStamp = Date.now();

          if (leadingCall) {
              if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
              }

              trailingCall = true;
          } else {
              leadingCall = true;
              trailingCall = false;

              setTimeout(timeoutCallback, delay);
          }

          lastCallTime = timeStamp;
      }

      return proxy;
  };

  var REFRESH_DELAY = 20;

  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];

  var mutationObserverSupported = typeof MutationObserver !== 'undefined';

  var ResizeObserverController = function() {
      this.connected_ = false;
      this.mutationEventsAdded_ = false;
      this.mutationsObserver_ = null;
      this.observers_ = [];

      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);
  };






  ResizeObserverController.prototype.addObserver = function (observer) {
      if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
      }

      if (!this.connected_) {
          this.connect_();
      }
  };

  ResizeObserverController.prototype.removeObserver = function (observer) {
      var observers = this.observers_;
      var index = observers.indexOf(observer);

      if (~index) {
          observers.splice(index, 1);
      }

      if (!observers.length && this.connected_) {
          this.disconnect_();
      }
  };

  ResizeObserverController.prototype.refresh = function () {
      var changesDetected = this.updateObservers_();

      if (changesDetected) {
          this.refresh();
      }
  };

  ResizeObserverController.prototype.updateObservers_ = function () {
      var activeObservers = this.observers_.filter(function (observer) {
          return observer.gatherActive(), observer.hasActive();
      });

      activeObservers.forEach(function (observer) { return observer.broadcastActive(); });

      return activeObservers.length > 0;
  };

  ResizeObserverController.prototype.connect_ = function () {
      if (!isBrowser || this.connected_) {
          return;
      }

      document.addEventListener('transitionend', this.onTransitionEnd_);

      window.addEventListener('resize', this.refresh);

      if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);

          this.mutationsObserver_.observe(document, {
              attributes: true,
              childList: true,
              characterData: true,
              subtree: true
          });
      } else {
          document.addEventListener('DOMSubtreeModified', this.refresh);

          this.mutationEventsAdded_ = true;
      }

      this.connected_ = true;
  };

  ResizeObserverController.prototype.disconnect_ = function () {
      if (!isBrowser || !this.connected_) {
          return;
      }

      document.removeEventListener('transitionend', this.onTransitionEnd_);
      window.removeEventListener('resize', this.refresh);

      if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
      }

      if (this.mutationEventsAdded_) {
          document.removeEventListener('DOMSubtreeModified', this.refresh);
      }

      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
  };

  ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {
          var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';

      var isReflowProperty = transitionKeys.some(function (key) {
          return !!~propertyName.indexOf(key);
      });

      if (isReflowProperty) {
          this.refresh();
      }
  };

  ResizeObserverController.getInstance = function () {
      if (!this.instance_) {
          this.instance_ = new ResizeObserverController();
      }

      return this.instance_;
  };

  ResizeObserverController.instance_ = null;

  var defineConfigurable = (function (target, props) {
      for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
          var key = list[i];

          Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
          });
      }

      return target;
  });

  var getWindowOf = (function (target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;

      return ownerGlobal || global$1;
  });

  var emptyRect = createRectInit(0, 0, 0, 0);

  function toFloat(value) {
      return parseFloat(value) || 0;
  }

  function getBordersSize(styles) {
      var positions = [], len = arguments.length - 1;
      while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];

      return positions.reduce(function (size, position) {
          var value = styles['border-' + position + '-width'];

          return size + toFloat(value);
      }, 0);
  }

  function getPaddings(styles) {
      var positions = ['top', 'right', 'bottom', 'left'];
      var paddings = {};

      for (var i = 0, list = positions; i < list.length; i += 1) {
          var position = list[i];

          var value = styles['padding-' + position];

          paddings[position] = toFloat(value);
      }

      return paddings;
  }

  function getSVGContentRect(target) {
      var bbox = target.getBBox();

      return createRectInit(0, 0, bbox.width, bbox.height);
  }

  function getHTMLElementContentRect(target) {
      var clientWidth = target.clientWidth;
      var clientHeight = target.clientHeight;

      if (!clientWidth && !clientHeight) {
          return emptyRect;
      }

      var styles = getWindowOf(target).getComputedStyle(target);
      var paddings = getPaddings(styles);
      var horizPad = paddings.left + paddings.right;
      var vertPad = paddings.top + paddings.bottom;

      var width = toFloat(styles.width),
          height = toFloat(styles.height);

      if (styles.boxSizing === 'border-box') {
          if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize(styles, 'left', 'right') + horizPad;
          }

          if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
          }
      }

      if (!isDocumentElement(target)) {
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;

          if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
          }

          if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
          }
      }

      return createRectInit(paddings.left, paddings.top, width, height);
  }

  var isSVGGraphicsElement = (function () {
      if (typeof SVGGraphicsElement !== 'undefined') {
          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
      }

      return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };
  })();

  function isDocumentElement(target) {
      return target === getWindowOf(target).document.documentElement;
  }

  function getContentRect(target) {
      if (!isBrowser) {
          return emptyRect;
      }

      if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
      }

      return getHTMLElementContentRect(target);
  }

  function createReadOnlyRect(ref) {
      var x = ref.x;
      var y = ref.y;
      var width = ref.width;
      var height = ref.height;

      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
      var rect = Object.create(Constr.prototype);

      defineConfigurable(rect, {
          x: x, y: y, width: width, height: height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
      });

      return rect;
  }

  function createRectInit(x, y, width, height) {
      return { x: x, y: y, width: width, height: height };
  }

  var ResizeObservation = function(target) {
      this.broadcastWidth = 0;
      this.broadcastHeight = 0;
      this.contentRect_ = createRectInit(0, 0, 0, 0);

      this.target = target;
  };





  ResizeObservation.prototype.isActive = function () {
      var rect = getContentRect(this.target);

      this.contentRect_ = rect;

      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };

  ResizeObservation.prototype.broadcastRect = function () {
      var rect = this.contentRect_;

      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;

      return rect;
  };

  var ResizeObserverEntry = function(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);

      defineConfigurable(this, { target: target, contentRect: contentRect });
  };

  var ResizeObserverSPI = function(callback, controller, callbackCtx) {
      this.activeObservations_ = [];
      this.observations_ = new MapShim();

      if (typeof callback !== 'function') {
          throw new TypeError('The callback provided as parameter 1 is not a function.');
      }

      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
  };






  ResizeObserverSPI.prototype.observe = function (target) {
      if (!arguments.length) {
          throw new TypeError('1 argument required, but only 0 present.');
      }

      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
          return;
      }

      if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
      }

      var observations = this.observations_;

      if (observations.has(target)) {
          return;
      }

      observations.set(target, new ResizeObservation(target));

      this.controller_.addObserver(this);

      this.controller_.refresh();
  };

  ResizeObserverSPI.prototype.unobserve = function (target) {
      if (!arguments.length) {
          throw new TypeError('1 argument required, but only 0 present.');
      }

      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
          return;
      }

      if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
      }

      var observations = this.observations_;

      if (!observations.has(target)) {
          return;
      }

      observations.delete(target);

      if (!observations.size) {
          this.controller_.removeObserver(this);
      }
  };

  ResizeObserverSPI.prototype.disconnect = function () {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
  };

  ResizeObserverSPI.prototype.gatherActive = function () {
          var this$1 = this;

      this.clearActive();

      this.observations_.forEach(function (observation) {
          if (observation.isActive()) {
              this$1.activeObservations_.push(observation);
          }
      });
  };

  ResizeObserverSPI.prototype.broadcastActive = function () {
      if (!this.hasActive()) {
          return;
      }

      var ctx = this.callbackCtx_;

      var entries = this.activeObservations_.map(function (observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });

      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
  };

  ResizeObserverSPI.prototype.clearActive = function () {
      this.activeObservations_.splice(0);
  };

  ResizeObserverSPI.prototype.hasActive = function () {
      return this.activeObservations_.length > 0;
  };

  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();

  var ResizeObserver = function(callback) {
      if (!(this instanceof ResizeObserver)) {
          throw new TypeError('Cannot call a class as a function.');
      }
      if (!arguments.length) {
          throw new TypeError('1 argument required, but only 0 present.');
      }

      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);

      observers.set(this, observer);
  };

  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
      ResizeObserver.prototype[method] = function () {
          return (ref = observers.get(this))[method].apply(ref, arguments);
          var ref;
      };
  });

  var index = (function () {
      if (typeof global$1.ResizeObserver !== 'undefined') {
          return global$1.ResizeObserver;
      }

      return ResizeObserver;
  })();

  var canUseDOM = !!(
    typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
  );

  var canUseDom = canUseDOM;

  var SimpleBar =
  function () {
    function SimpleBar(element, options) {
      var _this = this;

      _classCallCheck(this, SimpleBar);

      this.onScrollX = function () {
        if (!_this.scrollXTicking) {
          window.requestAnimationFrame(_this.scrollX);
          _this.scrollXTicking = true;
        }
      };

      this.onScrollY = function () {
        if (!_this.scrollYTicking) {
          window.requestAnimationFrame(_this.scrollY);
          _this.scrollYTicking = true;
        }
      };

      this.scrollX = function () {
        _this.showScrollbar('x');

        _this.positionScrollbar('x');

        _this.scrollXTicking = false;
      };

      this.scrollY = function () {
        _this.showScrollbar('y');

        _this.positionScrollbar('y');

        _this.scrollYTicking = false;
      };

      this.onMouseEnter = function () {
        _this.showScrollbar('x');

        _this.showScrollbar('y');
      };

      this.onMouseMove = function (e) {
        var bboxY = _this.trackY.getBoundingClientRect();

        var bboxX = _this.trackX.getBoundingClientRect();

        _this.mouseX = e.clientX;
        _this.mouseY = e.clientY;

        if (_this.isWithinBounds(bboxY)) {
          _this.showScrollbar('y');
        }

        if (_this.isWithinBounds(bboxX)) {
          _this.showScrollbar('x');
        }
      };

      this.onWindowResize = function () {
        _this.hideNativeScrollbar();
      };

      this.hideScrollbars = function () {
        var bboxY = _this.trackY.getBoundingClientRect();

        var bboxX = _this.trackX.getBoundingClientRect();

        if (!_this.isWithinBounds(bboxY)) {
          _this.scrollbarY.classList.remove('visible');

          _this.isVisible.y = false;
        }

        if (!_this.isWithinBounds(bboxX)) {
          _this.scrollbarX.classList.remove('visible');

          _this.isVisible.x = false;
        }
      };

      this.onMouseDown = function (e) {
        var bboxY = _this.scrollbarY.getBoundingClientRect();

        var bboxX = _this.scrollbarX.getBoundingClientRect();

        if (_this.isWithinBounds(bboxY)) {
          e.preventDefault();

          _this.onDrag(e, 'y');
        }

        if (_this.isWithinBounds(bboxX)) {
          e.preventDefault();

          _this.onDrag(e, 'x');
        }
      };

      this.drag = function (e) {
        var eventOffset, track, scrollEl;
        e.preventDefault();

        if (_this.currentAxis === 'y') {
          eventOffset = e.pageY;
          track = _this.trackY;
          scrollEl = _this.scrollContentEl;
        } else {
          eventOffset = e.pageX;
          track = _this.trackX;
          scrollEl = _this.contentEl;
        } 


        var dragPos = eventOffset - track.getBoundingClientRect()[_this.offsetAttr[_this.currentAxis]] - _this.dragOffset[_this.currentAxis]; 


        var dragPerc = dragPos / track[_this.sizeAttr[_this.currentAxis]]; 

        var scrollPos = dragPerc * _this.contentEl[_this.scrollSizeAttr[_this.currentAxis]];
        scrollEl[_this.scrollOffsetAttr[_this.currentAxis]] = scrollPos;
      };

      this.onEndDrag = function () {
        document.removeEventListener('mousemove', _this.drag);
        document.removeEventListener('mouseup', _this.onEndDrag);
      };

      this.el = element;
      this.flashTimeout;
      this.contentEl;
      this.scrollContentEl;
      this.dragOffset = {
        x: 0,
        y: 0
      };
      this.isEnabled = {
        x: true,
        y: true
      };
      this.isVisible = {
        x: false,
        y: false
      };
      this.scrollOffsetAttr = {
        x: 'scrollLeft',
        y: 'scrollTop'
      };
      this.sizeAttr = {
        x: 'offsetWidth',
        y: 'offsetHeight'
      };
      this.scrollSizeAttr = {
        x: 'scrollWidth',
        y: 'scrollHeight'
      };
      this.offsetAttr = {
        x: 'left',
        y: 'top'
      };
      this.globalObserver;
      this.mutationObserver;
      this.resizeObserver;
      this.currentAxis;
      this.scrollbarWidth;
      this.options = Object.assign({}, SimpleBar.defaultOptions, options);
      this.isRtl = this.options.direction === 'rtl';
      this.classNames = this.options.classNames;
      this.offsetSize = 20;
      this.recalculate = lodash_throttle(this.recalculate.bind(this), 1000);
      this.onMouseMove = lodash_throttle(this.onMouseMove.bind(this), 100);
      this.init();
    }

    _createClass(SimpleBar, [{
      key: "init",
      value: function init() {
        this.el.SimpleBar = this;
        this.initDOM(); 

        if (canUseDom) {
          this.hideNativeScrollbar();
          this.render();
          this.initListeners();
        }
      }
    }, {
      key: "initDOM",
      value: function initDOM() {
        var _this2 = this;

        if (Array.from(this.el.children).filter(function (child) {
          return child.classList.contains(_this2.classNames.scrollContent);
        }).length) {
          this.trackX = this.el.querySelector(".".concat(this.classNames.track, ".horizontal"));
          this.trackY = this.el.querySelector(".".concat(this.classNames.track, ".vertical"));
          this.scrollContentEl = this.el.querySelector(".".concat(this.classNames.scrollContent));
          this.contentEl = this.el.querySelector(".".concat(this.classNames.content));
        } else {
          this.scrollContentEl = document.createElement('div');
          this.contentEl = document.createElement('div');
          this.scrollContentEl.classList.add(this.classNames.scrollContent);
          this.contentEl.classList.add(this.classNames.content);

          while (this.el.firstChild) {
            this.contentEl.appendChild(this.el.firstChild);
          }

          this.scrollContentEl.appendChild(this.contentEl);
          this.el.appendChild(this.scrollContentEl);
        }

        if (!this.trackX || !this.trackY) {
          var track = document.createElement('div');
          var scrollbar = document.createElement('div');
          track.classList.add(this.classNames.track);
          scrollbar.classList.add(this.classNames.scrollbar);

          if (!this.options.autoHide) {
            scrollbar.classList.add('visible');
          }

          track.appendChild(scrollbar);
          this.trackX = track.cloneNode(true);
          this.trackX.classList.add('horizontal');
          this.trackY = track.cloneNode(true);
          this.trackY.classList.add('vertical');
          this.el.insertBefore(this.trackX, this.el.firstChild);
          this.el.insertBefore(this.trackY, this.el.firstChild);
        }

        this.scrollbarX = this.trackX.querySelector(".".concat(this.classNames.scrollbar));
        this.scrollbarY = this.trackY.querySelector(".".concat(this.classNames.scrollbar));
        this.el.setAttribute('data-simplebar', 'init');
      }
    }, {
      key: "initListeners",
      value: function initListeners() {
        var _this3 = this;

        if (this.options.autoHide) {
          this.el.addEventListener('mouseenter', this.onMouseEnter);
        }

        this.el.addEventListener('mousedown', this.onMouseDown);
        this.el.addEventListener('mousemove', this.onMouseMove);
        this.contentEl.addEventListener('scroll', this.onScrollX);
        this.scrollContentEl.addEventListener('scroll', this.onScrollY); 

        window.addEventListener('resize', this.onWindowResize); 

        if (typeof MutationObserver !== 'undefined') {
          this.mutationObserver = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              if (_this3.isChildNode(mutation.target) || mutation.addedNodes.length) {
                _this3.recalculate();
              }
            });
          }); 

          this.mutationObserver.observe(this.el, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }

        this.resizeObserver = new index(this.recalculate);
        this.resizeObserver.observe(this.el);
      }

    }, {
      key: "recalculate",
      value: function recalculate() {
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        this.contentSizeX = this.contentEl[this.scrollSizeAttr['x']];
        this.contentSizeY = this.contentEl[this.scrollSizeAttr['y']] - (this.scrollbarWidth || this.offsetSize);
        this.trackXSize = this.trackX[this.sizeAttr['x']];
        this.trackYSize = this.trackY[this.sizeAttr['y']]; 

        this.isEnabled['x'] = this.trackXSize < this.contentSizeX;
        this.isEnabled['y'] = this.trackYSize < this.contentSizeY;
        this.resizeScrollbar('y');
        this.positionScrollbar('y');
        this.toggleTrackVisibility('y');
      }

    }, {
      key: "resizeScrollbar",
      value: function resizeScrollbar() {
        var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'y';
        var scrollbar;
        var contentSize;
        var trackSize;

        if (!this.isEnabled[axis] && !this.options.forceVisible) {
          return;
        }

        if (axis === 'x') {
          scrollbar = this.scrollbarX;
          contentSize = this.contentSizeX;
          trackSize = this.trackXSize;
        } else {
          scrollbar = this.scrollbarY;
          contentSize = this.contentSizeY;
          trackSize = this.trackYSize;
        }

        var scrollbarRatio = trackSize / contentSize; 

        this.handleSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);

        if (this.options.scrollbarMaxSize) {
          this.handleSize = Math.min(this.handleSize, this.options.scrollbarMaxSize);
        }

        if (axis === 'x') {
          scrollbar.style.width = "".concat(this.handleSize, "px");
        } else {
          scrollbar.style.height = "".concat(this.handleSize, "px");
        }
      }
    }, {
      key: "positionScrollbar",
      value: function positionScrollbar() {
        var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'y';
        var scrollbar;
        var scrollOffset;
        var contentSize;
        var trackSize;

        if (axis === 'x') {
          scrollbar = this.scrollbarX;
          scrollOffset = this.contentEl[this.scrollOffsetAttr[axis]]; 

          contentSize = this.contentSizeX;
          trackSize = this.trackXSize;
        } else {
          scrollbar = this.scrollbarY;
          scrollOffset = this.scrollContentEl[this.scrollOffsetAttr[axis]]; 

          contentSize = this.contentSizeY;
          trackSize = this.trackYSize;
        }

        var scrollPourcent = scrollOffset / (contentSize - trackSize);
        var handleOffset = ~~((trackSize - this.handleSize) * scrollPourcent);

        if (this.isEnabled[axis] || this.options.forceVisible) {
          if (axis === 'x') {
            scrollbar.style.transform = "translate3d(".concat(handleOffset, "px, 0, 0)");
          } else {
            scrollbar.style.transform = "translate3d(0, ".concat(handleOffset, "px, 0)");
          }
        }
      }
    }, {
      key: "toggleTrackVisibility",
      value: function toggleTrackVisibility() {
        var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'y';
        var track = axis === 'y' ? this.trackY : this.trackX;
        var scrollbar = axis === 'y' ? this.scrollbarY : this.scrollbarX;

        if (this.isEnabled[axis] || this.options.forceVisible) {
          track.style.visibility = 'visible';
        } else {
          track.style.visibility = 'hidden';
        } 


        if (this.options.forceVisible) {
          if (this.isEnabled[axis]) {
            scrollbar.style.visibility = 'visible';
          } else {
            scrollbar.style.visibility = 'hidden';
          }
        }
      }
    }, {
      key: "hideNativeScrollbar",
      value: function hideNativeScrollbar() {
        this.scrollbarWidth = scrollbarWidth();


        this.scrollContentEl.style[this.isRtl ? 'paddingLeft' : 'paddingRight'] = "".concat(this.scrollbarWidth+1.5 || this.offsetSize, "px");
        this.scrollContentEl.style.marginBottom = "-".concat(this.scrollbarWidth * 2 || this.offsetSize, "px");
        this.contentEl.style.paddingBottom = "".concat(this.scrollbarWidth || this.offsetSize, "px");

        if (this.scrollbarWidth !== 0) {
          this.contentEl.style[this.isRtl ? 'marginLeft' : 'marginRight'] = "-".concat(this.scrollbarWidth, "px");
        }
      }

    }, {
      key: "showScrollbar",

      value: function showScrollbar() {
        var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'y';
        var scrollbar; 

        if (this.isVisible[axis]) {
          return;
        }

        if (axis === 'x') {
          scrollbar = this.scrollbarX;
        } else {
          scrollbar = this.scrollbarY;
        }

        if (this.isEnabled[axis]) {
          scrollbar.classList.add('visible');
          this.isVisible[axis] = true;
        }

        if (!this.options.autoHide) {
          return;
        }

        window.clearInterval(this.flashTimeout);
        this.flashTimeout = window.setInterval(this.hideScrollbars, this.options.timeout);
      }

    }, {
      key: "onDrag",

      value: function onDrag(e) {
        var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'y';
        e.preventDefault();
        var scrollbar = axis === 'y' ? this.scrollbarY : this.scrollbarX; 

        var eventOffset = axis === 'y' ? e.pageY : e.pageX;
        this.dragOffset[axis] = eventOffset - scrollbar.getBoundingClientRect()[this.offsetAttr[axis]];
        this.currentAxis = axis;
        document.addEventListener('mousemove', this.drag);
        document.addEventListener('mouseup', this.onEndDrag);
      }

    }, {
      key: "getScrollElement",

      value: function getScrollElement() {
        var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'y';
        return axis === 'y' ? this.scrollContentEl : this.contentEl;
      }

    }, {
      key: "getContentElement",
      value: function getContentElement() {
        return this.contentEl;
      }
    }, {
      key: "removeListeners",
      value: function removeListeners() {
        if (this.options.autoHide) {
          this.el.removeEventListener('mouseenter', this.onMouseEnter);
        }

        this.scrollContentEl.removeEventListener('scroll', this.onScrollY);
        this.contentEl.removeEventListener('scroll', this.onScrollX);
        this.mutationObserver.disconnect();
        this.resizeObserver.disconnect();
      }

    }, {
      key: "unMount",
      value: function unMount() {
        this.removeListeners();
        this.el.SimpleBar = null;
      }

    }, {
      key: "isChildNode",
      value: function isChildNode(el) {
        if (el === null) return false;
        if (el === this.el) return true;
        return this.isChildNode(el.parentNode);
      }

    }, {
      key: "isWithinBounds",
      value: function isWithinBounds(bbox) {
        return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;
      }
    }], [{
      key: "initHtmlApi",
      value: function initHtmlApi() {
        this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this); 

        if (typeof MutationObserver !== 'undefined') {
          this.globalObserver = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              Array.from(mutation.addedNodes).forEach(function (addedNode) {
                if (addedNode.nodeType === 1) {
                  if (addedNode.hasAttribute('data-simplebar')) {
                    !addedNode.SimpleBar && new SimpleBar(addedNode, SimpleBar.getElOptions(addedNode));
                  } else {
                    Array.from(addedNode.querySelectorAll('[data-simplebar]')).forEach(function (el) {
                      !el.SimpleBar && new SimpleBar(el, SimpleBar.getElOptions(el));
                    });
                  }
                }
              });
              Array.from(mutation.removedNodes).forEach(function (removedNode) {
                if (removedNode.nodeType === 1) {
                  if (removedNode.hasAttribute('data-simplebar')) {
                    removedNode.SimpleBar && removedNode.SimpleBar.unMount();
                  } else {
                    Array.from(removedNode.querySelectorAll('[data-simplebar]')).forEach(function (el) {
                      el.SimpleBar && el.SimpleBar.unMount();
                    });
                  }
                }
              });
            });
          });
          this.globalObserver.observe(document, {
            childList: true,
            subtree: true
          });
        } 


        if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
          window.setTimeout(this.initDOMLoadedElements);
        } else {
          document.addEventListener('DOMContentLoaded', this.initDOMLoadedElements);
          window.addEventListener('load', this.initDOMLoadedElements);
        }
      } 

    }, {
      key: "getElOptions",
      value: function getElOptions(el) {
        var options = Array.from(el.attributes).reduce(function (acc, attribute) {
          var option = attribute.name.match(/data-simplebar-(.+)/);

          if (option) {
            var key = option[1].replace(/\W+(.)/g, function (x, chr) {
              return chr.toUpperCase();
            });

            switch (attribute.value) {
              case 'true':
                acc[key] = true;
                break;

              case 'false':
                acc[key] = false;
                break;

              case undefined:
                acc[key] = true;
                break;

              default:
                acc[key] = attribute.value;
            }
          }

          return acc;
        }, {});
        return options;
      }
    }, {
      key: "removeObserver",
      value: function removeObserver() {
        this.globalObserver.disconnect();
      }
    }, {
      key: "initDOMLoadedElements",
      value: function initDOMLoadedElements() {
        document.removeEventListener('DOMContentLoaded', this.initDOMLoadedElements);
        window.removeEventListener('load', this.initDOMLoadedElements);
        Array.from(document.querySelectorAll('[data-simplebar]')).forEach(function (el) {
          if (!el.SimpleBar) new SimpleBar(el, SimpleBar.getElOptions(el));
        });
      }
    }, {
      key: "defaultOptions",
      get: function get() {
        return {
          autoHide: true,
          forceVisible: false,
          classNames: {
            content: 'simplebar-content',
            scrollContent: 'simplebar-scroll-content',
            scrollbar: 'simplebar-scrollbar',
            track: 'simplebar-track'
          },
          scrollbarMinSize: 25,
          scrollbarMaxSize: 0,
          direction: 'ltr',
          timeout: 1000
        };
      }
    }]);

    return SimpleBar;
  }();

  if (canUseDom) {
    SimpleBar.initHtmlApi();
  }

  return SimpleBar;

})));
"use strict";

var sampleTable;
var leftCheck;
var sciNames;
var italics;
var lineNumbers;
var showEndemics;

var currentCountry;
var checklistAuthorsPanel;
var checklistFlyoutText;

var countryModal;
var modalOverlay;

var gNumDays;
var gStartDate;
var previousNumDaysClass;

var countryButton;
var numDaysButton;
var pdfButton;
var csvButton;
var requested;

var mailLink;
var observer;
var target;


document.addEventListener("DOMContentLoaded", function () {
  void 0;


  countryButton = document.getElementById("countryButton");
  countryButton.addEventListener("click", toggleCountryModal);

  numDaysButton = document.getElementById("numDays");
  numDaysButton.addEventListener("click", setNumDays)
  numDaysButton.addEventListener('keyup', setNumDays);

  numDaysButton.children.item(11).classList.add("highlight");
  gNumDays = 10;

  sampleTable = document.getElementById("sampleTable");
  sampleTable.classList.add("numDays" + String(gNumDays));

  previousNumDaysClass = "numDays10";

  pdfButton = document.getElementById("pdfButton");
  pdfButton.addEventListener("click", openChecklistPage);

  csvButton = document.getElementById("csvButton");
  csvButton.addEventListener("click", getCSVText);

  lineNumbers = document.getElementById("lineNumbers");
  leftCheck = document.getElementById("leftCheck");
  showEndemics = document.getElementById("showEndemics");
  sciNames = document.getElementById("sciNames");
  italics = document.getElementById("italics");

  lineNumbers.addEventListener("click", toggleSampleTableLineNumbers);
  leftCheck.addEventListener("click", toggleSampleTableLeftChecks);
  showEndemics.addEventListener("click", toggleSampleTableShowEndemics);
  sciNames.addEventListener("click", toggleSampleTableSciNames);
  italics.addEventListener("click", toggleSampleTableItalics);

    lineNumbers.nextElementSibling.addEventListener("keyup", toggleSampleTableLineNumbers);
  leftCheck.nextElementSibling.addEventListener("keyup", toggleSampleTableLeftChecks);
  showEndemics.nextElementSibling.addEventListener("keyup", toggleSampleTableShowEndemics);
  sciNames.nextElementSibling.addEventListener("keyup", toggleSampleTableSciNames);
  italics.nextElementSibling.addEventListener("keyup", toggleSampleTableItalics);

  checklistAuthorsPanel = document.getElementById("checklistAuthorsPanel");
  checklistFlyoutText = document.getElementById("checklistFlyoutText");

  document.querySelector(".country-menu").addEventListener("click", setCountry);
  document.querySelector(".country-menu").addEventListener("keyup", setCountry);  

    leftCheck.checked = true;

  countryModal = document.getElementById("countryModal");
  modalOverlay = document.getElementById("md-overlay");

  mailLink = document.getElementById("mailLink");
  mailLink.addEventListener("click", sendEmail);

  target = document.getElementById("checklistArticle");
});


function setUpMapBodyIntersectionObserver() {
  var options = {

    root: null,
    rootMargin: "0px",
    threshold: 0.4
  };

  observer = new IntersectionObserver(fadeMap, options);
  observer.observe(target);
}

function fadeMap(entries, observer) {
  void 0;



  var map = document.getElementById("currentMap");


  map.classList.toggle("fadeMap");

}











function sendEmail() {
  window.location.href = "mailto:mark@potoococha.net";
}

function toggleCountryModal(evt) {

  countryModal.classList.toggle("menu-show");

  modalOverlay.classList.toggle("show");

  if (evt) evt.stopPropagation();

  document.getElementById("tax-panel").classList.add("translateDown");




}

function toggleSampleTableShowEndemics(evt) {

  if (evt.type === "keyup") {
    if (evt.keyCode !== 13) {
      return;
    }
    else {
      evt.target.previousElementSibling.checked = !evt.target.previousElementSibling.checked;
    }
  }

  sampleTable.querySelector("td.endemical").classList.toggle("showEndemics");
}

function toggleSampleTableSciNames(evt) {

  if (evt.type === "keyup") {
    if (evt.keyCode !== 13) {
      return;
    }
    else {
      evt.target.previousElementSibling.checked = !evt.target.previousElementSibling.checked;
    }
  }

  sampleTable.classList.toggle("noScientificNames");
  italics.disabled = !italics.disabled;
}

function toggleSampleTableItalics(evt) {

  if (evt.type === "keyup") {
    if (evt.keyCode !== 13) {
      return;
    }
    else {
      evt.target.previousElementSibling.checked = !evt.target.previousElementSibling.checked;
    }
  }

  sampleTable.classList.toggle("noItalics");
}

function toggleSampleTableLeftChecks(evt) {

  if (evt.type === "keyup") {
    if (evt.keyCode !== 13) {
      return;
    }
    else {
      evt.target.previousElementSibling.checked = !evt.target.previousElementSibling.checked;
    }
  }

  var list = sampleTable.querySelectorAll(".leftCheckBox, .familyHidden");
  Array.prototype.forEach.call(list, function (item) {
    item.classList.toggle("show");
  });
}

function toggleSampleTableLineNumbers(evt) {

  if (evt.type === "keyup") {
    if (evt.keyCode !== 13) {
      return;
    }
    else {
      evt.target.previousElementSibling.checked = !evt.target.previousElementSibling.checked;
    }
  }

  sampleTable.querySelector("td.lineNumbers").classList.toggle("showLineNumbers");
}

function setCountry(evt) {

  if (evt.type === "keyup" && evt.keyCode !== 13) {
    return;
  }

  var previousHighlightedCountry = evt.target.parentNode.parentNode.querySelector(".highlight");
  if (previousHighlightedCountry) previousHighlightedCountry.classList.remove("highlight");

  evt.target.classList.add("highlight");

  if (!currentCountry) {

    map.getElementsByClassName("drawing")[0].classList.add("active");
  }


  toggleCountryModal();

  currentCountry = evt.target.innerText;

  if (currentCountry === "Falklands") countryButton.innerHTML = "Malvinas/Falklands";
  else countryButton.innerHTML = currentCountry;

  setChecklistCountryAuthors(currentCountry);
  loadCountryTaxonomy(currentCountry);
}

function setChecklistCountryAuthors(country) {

  checklistFlyoutText.innerHTML = "Make a checklist for " + country;




  if (country === "French Guiana") selectedCountryFill("FrenchGuiana");
  else if (country !== "South America") selectedCountryFill(country);
  else fillSAMmap("");

  if (country === "CuraÃ§ao") {
    getAjax("Authors/" + "Curacao.txt", setChecklistAuthors);
  }
  else if (country === "French Guiana") {
    getAjax("Authors/" + "FrenchGuiana.txt", setChecklistAuthors);
  }
  else if (country === "South America") {
    getAjax("Authors/" + "SouthAmerica.txt", setChecklistAuthors);
  }
  else getAjax("Authors/" + country + ".txt", setChecklistAuthors);
}

function setChecklistAuthors(data) {


  var authors;

  if (currentCountry === "SouthAmerica") {
    authors = data.replace(/^.*Version(.*)$/g, "Remsen, et al. $1");
  }

  else if (currentCountry === "Colombia") {
    authors = data.replace(/^(.*)\s+\(.*\).*Version(.*)$/g, "$1. $2");
  }



  else {
    authors = data.replace(/^(.*\.) \d\d\d\d\..*Version(.*$)/g, "$1 $2");
  }

  checklistAuthorsPanel.innerHTML = authors;
  checklistAuthorsPanel.classList.add("show");
}

function setNumDays(evt) {

  if (evt.type === "keyup" && evt.keyCode !== 13) {
    return;
  }

    var day = evt.target;
  var list;   

  if (day.classList.contains("highlight")) {  
    return;
  }
  else if (gNumDays || gNumDays === 0) {
    numDaysButton.children[gNumDays + 1].classList.remove("highlight");
  }

  day.classList.add("highlight");
  gNumDays = parseInt(day.innerHTML);

  sampleTable.classList.remove(previousNumDaysClass);


    sampleTable.classList.add("numDays" + String(gNumDays));

  previousNumDaysClass = "numDays" + String(gNumDays);



  list = sampleTable.querySelectorAll("td.cds, th.cds");
  Array.prototype.forEach.call(list, function (item) {
    item.classList.remove("cds");
  });

  if (gNumDays === 6) {

    list = sampleTable.querySelectorAll("td:nth-child(6), th:nth-child(4)");
    Array.prototype.forEach.call(list, function (item) {
      item.classList.add("cds");
    });
  }
  else if (gNumDays === 7 || gNumDays === 8) {

    list = sampleTable.querySelectorAll("td:nth-child(7), th:nth-child(5)");
    Array.prototype.forEach.call(list, function (item) {
      item.classList.add("cds");
    });

  }
  else if (gNumDays === 9 || gNumDays === 10) {

    list = sampleTable.querySelectorAll("td:nth-child(8), th:nth-child(6)");
    Array.prototype.forEach.call(list, function (item) {
      item.classList.add("cds");
    });
  }
  else if (gNumDays === 11 || gNumDays === 12) {

    list = sampleTable.querySelectorAll("td:nth-child(8), td:nth-child(13), th:nth-child(6), th:nth-child(11)");
    Array.prototype.forEach.call(list, function (item) {
      item.classList.add("cds");
    });
  }



}

function getCSVText() {

  if (!currentCountry) return;

  requested = "csv";
  logVisit();  

  var tempCountry;

  if (currentCountry === "French Guiana") tempCountry = "FrenchGuiana";
  else if (currentCountry === "South America") tempCountry = "SouthAmerica";
  else if (currentCountry === "CuraÃ§ao") tempCountry = "Curacao";
  else tempCountry = currentCountry;

  if (tempCountry) {

    var form = document.createElement("form");
    form.setAttribute("method", "post");
    form.setAttribute("action", "../php/sendCSV.php?country=" + tempCountry + "");

    document.body.appendChild(form);

    form.submit();
    form.remove();
  }
}

function openChecklistPage() {

  if (!currentCountry) return;

  requested = "checklist";
  logVisit();  

  var vars;
  var tempCountry;

  if (currentCountry === "French Guiana") tempCountry = "FrenchGuiana";
  else if (currentCountry === "South America") tempCountry = "SouthAmerica";
  else if (currentCountry === "CuraÃ§ao") tempCountry = "Curacao";
  else tempCountry = currentCountry;

  if (gNumDays === undefined) gNumDays = 12;
  if (gStartDate === undefined) gStartDate = 1;

  vars = "?country=" + tempCountry;
  vars += "&num_days=" + gNumDays;
  vars += "&start_date=" + gStartDate;

  vars += "&line_nos=" + lineNumbers.checked;
  vars += "&left_check=" + leftCheck.checked;
  vars += "&endemics=" + showEndemics.checked;
  vars += "&sci_names=" + !sciNames.checked;
  vars += "&italics=" + !italics.checked;

  window.open("../php/makePDF.php" + vars, "_blank");
}

function logVisit() {

  if (!navigator.sendBeacon) {
    void 0;
    return true;
  }

  var url = "./php/collectVisits.php";

  var data = new FormData();
  data.append('country', currentCountry);
  data.append('document', requested);

  navigator.sendBeacon(url, data);
}
"use strict";

var map;

var countries = {
  "Argentina": 0, "Aruba": 1, "Bolivia": 2, "Brazil": 3, "Chile": 4,
  "Colombia": 5, "CuraÃ§ao": 6, "Ecuador": 7, "FrenchGuiana": 8,
  "Guyana": 9, "Paraguay": 10, "Peru": 11, "Suriname": 12, "Trinidad": 13,
  "Uruguay": 14, "Venezuela": 15, "Bonaire": 16, "Falklands": 17
};


var endemicColor = "#d73027";
var extinctColor = "#000";
var residentColor = "#fc8d59";

var nonBreederColor = "#579ac4";

var vagrantColor = "#54ca30";
var hypotheticalColor = "#ddd";
var introducedColor = "#fee090";

var baseColor = "â#535b5f";
var baseStrokeColor = "#fff";
var darkerStrokeColor = "#444";
var selectedCountryFillColor = "#f33";


function initCurrentMap() {

  prepareSVGstyles("SAMsvg");

  map = document.getElementById("currentMap");
}

function prepareSVGstyles(obj) {

  var svg = document.getElementById(obj);


  var svgDoc = svg.contentDocument;

  for (var country in countries) {

    var cc = svgDoc.getElementById(country);

    if (!cc) continue;

    setSVGstyles(cc);
  }
}

function setSVGstyles(obj) {

  if (obj.nodeName === "path" || obj.nodeName === "circle") {

    obj.style.transition = "fill 1s";
  }

  else if (obj.parentNode.nodeName === "g") {

    var paths = obj.querySelectorAll("path");
    var len = paths.length;

    for (var i = 0; i < len; i++) {
      paths[i].style.transition = "fill 1s";
    }
  }
}

function fillSAMmap(skipCountry) {

  var svg;
  svg = currentMap.querySelector("#SAMsvg");
  var svgDoc = svg.contentDocument;

  for (var country in countries) {

    var cc = svgDoc.getElementById(country);
    if (!cc || cc === skipCountry) continue;
    newFillColor(cc, baseColor);
    newStrokeColor(cc, baseStrokeColor);
  }
  addBirdNameToMap("");
}

function newFillColor(obj, newColor) {

  if (obj.nodeName === "path" || obj.nodeName === "circle") {
    if (newColor === baseColor) {
      obj.style.fill = "#535b5f";
    }
    else obj.style.fill = newColor;

    if (newColor !== residentColor) obj.style.stroke = baseStrokeColor;
  }

  else if (obj.parentNode.nodeName === "g") {

    var paths = obj.querySelectorAll("path");

    var len = paths.length;
    for (var i = 0; i < len; i++) {

      if (newColor === baseColor) {
        paths[i].style.fill = "#535b5f";
      }
      else paths[i].style.fill = newColor;

      if (newColor !== residentColor) paths[i].style.stroke = baseStrokeColor;
    }
  }
}

function selectedCountryFill(selectedCountry) {

  var svg = currentMap.querySelector("#SAMsvg");
  var svgDoc = svg.contentDocument;

  var cc = svgDoc.getElementById(selectedCountry);

  fillSAMmap(cc);
  newFillColor(cc, selectedCountryFillColor);
  newStrokeColor(cc, baseStrokeColor);
}

function newStrokeColor(obj, newColor) {

  if (obj.nodeName === "path" || obj.nodeName === "circle") {
    obj.style.stroke = newColor;
  }

  else if (obj.parentNode.nodeName === "g") {

    var paths = obj.querySelectorAll("path");

    var len = paths.length;
    for (var i = 0; i < len; i++) {

      if (obj.id === "Falklands") {
        paths[i].style.stroke = "#fff";
      }

      else paths[i].style.stroke = newColor;
    }
  }
}

function highlightSAMmap(index, current) {
  var svg;

  if (current === "currentMap") {
    svg = currentMap.querySelector("#SAMsvg");
  }
  else {
    svg = document.getElementById(current);
  }
  var svgDoc = svg.contentDocument;
  var cList = birds[index].split("-");

  for (var country in countries) {

    var cc = svgDoc.getElementById(country);

    if (!cc) continue;

    if (country === "Falklands") cList[countries[country]] = cList[countries[country]].trim();

    switch (cList[countries[country]]) {

      case "X(e)":

        newFillColor(cc, endemicColor);
        newStrokeColor(cc, baseStrokeColor)
        break;

      case "X":

        newFillColor(cc, residentColor);
        newStrokeColor(cc, baseStrokeColor)
        break;

      case "NB":

        newFillColor(cc, nonBreederColor);
        newStrokeColor(cc, baseStrokeColor)
        break;

      case "V":

        newFillColor(cc, vagrantColor);
        break;

      case "H":
        newFillColor(cc, hypotheticalColor);
        newStrokeColor(cc, darkerStrokeColor)
        break;

      case "IN":

        newFillColor(cc, introducedColor);
        newStrokeColor(cc, darkerStrokeColor)
        break;

      case "EX":

        newFillColor(cc, extinctColor);
        newStrokeColor(cc, baseStrokeColor)        
        break;

      case "EX(e)":

        newFillColor(cc, extinctColor);
        newStrokeColor(cc, baseStrokeColor)        
        break;

      default:
        newFillColor(cc, baseColor);
        newStrokeColor(cc, baseStrokeColor)
    }
  }

  if ((current === "currentMap") && (mapsCollection.children.length < 5)) { saveMapButton.style.display = "block"; }
}

"use strict";

var lastQuery;
var lastSpecies;

var species;
var families;
var numFamilies;

var birds;

var numSpeciesList = {
  "Argentina": 1006, "Aruba": 219, "Bolivia": 1384, "Brazil": 1806, "Chile": 498,
  "Colombia": 1851, "CuraÃ§ao": 217, "Ecuador": 1635, "French Guiana": 699,
  "Guyana": 785, "Paraguay": 694, "Peru": 1802, "Suriname": 732, "Trinidad": 470,
  "Uruguay": 448, "Venezuela": 1386, "Bonaire": 208, "Falklands": 227, "South America": 3413
};


var numFamiliesList = {
  "Argentina": 87, "Aruba": 52, "Bolivia": 78, "Brazil": 93, "Chile": 68,
  "Colombia": 93, "CuraÃ§ao": 51, "Ecuador": 93, "French Guiana": 83,
  "Guyana": 80, "Paraguay": 72, "Peru": 89, "Suriname": 81, "Trinidad": 71,
  "Uruguay": 73, "Venezuela": 90, "Bonaire": 48, "Falklands": 49, "South America": 105
};


var searchCountryText;
var taxTreeArticleOpen = false;

var taxPage;
var taxPanel;
var searchSpecials;
var resultsPanel;
var searchResults;

var simpleBarResults;
var simpleBarTaxPage;

var closeResultsPanelButton;
var resultsPanelOpen = false;
var printerButton;
var closeOpenFamiliesButton;

var searchInput;

var lastResultsSpecies;
var lastIndex;

var searchSlideUpWrapper;
var taxInstructionsButton;
var searchInstructionsOpen = true;



document.addEventListener("DOMContentLoaded", function () {

  searchSlideUpWrapper = document.querySelector("#taxonomyArticle > div.slideUpWrapper");
  searchSlideUpWrapper.style.height = searchSlideUpWrapper.clientHeight + "px";

  taxInstructionsButton = document.querySelector(".taxInstructionsButton");

  closeResultsPanelButton = document.getElementById("closeResultsPanelButton");
  closeResultsPanelButton.addEventListener("click", toggleSearchResultsPanel);

  printerButton = document.getElementById("printerButton");
  printerButton.addEventListener("click", printElem);

  closeOpenFamiliesButton = document.getElementById("closeOpenFamiliesButton");
  closeOpenFamiliesButton.addEventListener("click", closeAllFamilies);

  searchCountryText = document.getElementById("searchCountryText");

  searchInput = document.getElementById("searchInput");
  searchSpecials = document.getElementById("searchSpecials");

  searchInput.addEventListener("input", getQuery);

  searchSpecials.addEventListener("click", getSearchSpecialsQuery);
  searchSpecials.addEventListener("keyup", getSearchSpecialsQuery);  

  taxInstructionsButton.addEventListener("click", showSearchInstructions);

  taxPage = document.getElementById("taxPage");

  searchResults = document.getElementById("searchResults");
  resultsPanel = document.querySelector(".results-panel");

  searchResults.addEventListener("click", gotoMatch, false);
  taxPage.addEventListener("click", toggleFamilyOpen);
  taxPanel = document.getElementById("tax-panel");



  getAjax("../occurrences/occurrences.txt", function (data) { loadOccurrences(data); });
});

function getAjax(url, success) {

  var xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.onreadystatechange = function () {
    if (xhr.readyState > 3 && xhr.status === 200) success(xhr.responseText);
  };
  xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
  xhr.send();
  return xhr;
}


function loadOccurrences(data) {
  birds = data.split("\n");
}




function showSearchInstructions() {

  if (!searchInstructionsOpen) document.querySelector(".taxInstructionsButton .tooltip").innerHTML = "Close";
  else document.querySelector(".taxInstructionsButton .tooltip").innerHTML = "Open";

  if (!taxInstructionsButton.classList.contains("instructionsClosed")) taxInstructionsButton.classList.add("instructionsClosed");
  searchSlideUpWrapper.classList.toggle("closeInstructions");
  searchInstructionsOpen = !searchInstructionsOpen;
}

function enableSearchSpecials() {

    document.querySelector("#searchForm span.grayed").classList.remove("grayed");
  searchSpecials.classList.remove("grayed");

    var list = searchSpecials.querySelectorAll("a");

      list.forEach(function(element) {
    element.setAttribute("tabindex", "0");
  });

    searchInput.setAttribute("tabindex", "0");
}

function loadCountryTaxonomy(country) {

  if (searchSpecials.classList.contains("grayed")) {
    enableSearchSpecials();    





    closeOpenFamiliesButton.setAttribute("tabindex", "0");
  }

  if (lastQuery) {
    document.getElementById("countrySearch").classList.remove("closed");
    document.getElementById("searchTerm").innerHTML = country + " : '<span>" + lastQuery + "</span>'";
  }

  if (country !== "South America") {
    searchResults.classList.remove("samTax");
    taxPage.classList.remove("samTax");
  }

  if (country === "French Guiana") getAjax("Countries/FrenchGuianaSACC.html", getCountryData);

  else if (country === "CuraÃ§ao") getAjax("Countries/CuracaoSACC.html", getCountryData);

  else if (country === "South America") {

    getAjax("Countries/SouthAmericaSACC.html", getCountryData);
    searchResults.classList.add("samTax");


    searchSpecials.querySelector("div:nth-of-type(3)").classList.add("notAvailable");
    searchSpecials.querySelector("div:nth-of-type(5)").classList.add("notAvailable");

    searchSpecials.classList.add("SAM");
    taxPage.classList.add("samTax");
  }

  else if (country) getAjax("Countries/" + country + "SACC.html", getCountryData);

  if (country !== "South America") {
    searchSpecials.querySelector("div:nth-of-type(3)").classList.remove("notAvailable");
    searchSpecials.querySelector("div:nth-of-type(5)").classList.remove("notAvailable");
    searchSpecials.classList.remove("SAM");
  }

  if (!lastQuery) {
    currentMap.querySelector(".saveMapButton").style.display = "none";
    document.querySelector(".colorKey").style.opacity = "0.9";
  }

  else if (lastQuery === "endemic" || lastQuery === "hypothetical" || lastQuery === "vagrant" ||
    lastQuery === "incertae" || lastQuery === "extinct") {

    currentMap.querySelector(".saveMapButton").style.display = "none";
  }

  if (country === "Falklands") searchCountryText.innerHTML = "the Falklands";
  else searchCountryText.innerHTML = country;

  if (country === "Falklands")
    document.querySelector("#treeIntroText").innerHTML = "Falklands/Malvinas" + " &nbsp; : &nbsp; " + numFamiliesList[country] + " families, " + numSpeciesList[country] + " species";
  else document.querySelector("#treeIntroText").innerHTML = country + " &nbsp; : &nbsp; " + numFamiliesList[country] + " families, " + numSpeciesList[country] + " species";

}

function toggleSearchResultsPanel() {

  searchResults.classList.toggle("fadeIn");
  resultsPanel.classList.toggle("translateDown");

    if (!resultsPanelOpen) {
    closeResultsPanelButton.setAttribute("tabindex", "0");
    printerButton.setAttribute("tabindex", "0");
  }
  else {
    closeResultsPanelButton.setAttribute("tabindex", "-1");
    printerButton.setAttribute("tabindex", "-1");
  }

    resultsPanelOpen = !resultsPanelOpen;
}

function getCountryData(data) {

  taxPage.innerHTML = data;

  var taxPanel = document.querySelector(".tax-panel");

  species = document.getElementById("tree").getElementsByTagName("li");

  families = taxPage.querySelectorAll("#tree .family");
  numFamilies = families.length;

  if (lastQuery) searchTree(lastQuery);

  resetTaxPageHeight();
}

function getQuery() {

  var badIndex = searchInput.value.search(/[^"a-zÃ±Ã£'\s-]/i);

  if (badIndex !== -1) {
    searchResults.innerHTML = "<li></li><li> &nbsp; &nbsp; character '" + searchInput.value[badIndex] + "' not allowed </li><li></li>";
    if (!resultsPanelOpen) toggleSearchResultsPanel();
    resetSearchResultsHeight();
    return;
  }

  if (searchInput.value.length < 2) {
    return;
  }

  searchTree(searchInput.value);
}

function getSearchSpecialsQuery(evt) {


   if (evt.type === "keyup" && evt.keyCode !== 13) {
    return;
  }

  var term;

  searchInput.value = "";

  if (evt.target.id === "searchSpecials") return;     
  else if (evt.target.className === "searchSpecialWrapper")
    term = evt.target.textContent.trim();    
  else term = evt.target.parentNode.textContent.trim();

  searchTree(term);
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); 
}

function searchTree(query2) {

  var query;
  query2 = escapeRegExp(query2);

  document.querySelector(".colorKey").style.opacity = "0.9";

  var numFound = 0;

  if (!resultsPanelOpen) toggleSearchResultsPanel();

  lastQuery = query2;

  if (lastQuery) {
    document.getElementById("countrySearch").classList.remove("closed");
    if (currentCountry === "Falklands") {
      document.getElementById("searchTerm").innerHTML = "Falklands/Malvinas" + " : '<span>" + lastQuery + "</span>'";
    }
    else document.getElementById("searchTerm").innerHTML = currentCountry + " : '<span>" + lastQuery + "</span>'";
  }
  else {
    searchResults.innerHTML = "<li></li><li> &nbsp; &nbsp; search results will appear here</li><li></li>";

    if (!resultsPanelOpen) toggleSearchResultsPanel();
    searchResults.style.top = 0;

    resetSearchResultsHeight();
    return;
  }


  for (var i = 0; i < numFamilies; i++) {
    families[i].cloned = false;
  }

  var warning = false;

  if (lastSpecies && lastSpecies.classList.contains("active")) {
    lastSpecies.classList.remove("active");
  }

  var matches = [];
  var j = 0;
  var entry;
  var eClass;
  var sL = species.length;

  if (query2 === "endemic" || query2 === "hypothetical" || query2 === "vagrant" ||
    query2 === "incertae" || query2 === "extinct") {

    var special;

    if (query2 === "endemic") special = document.getElementById("tree").getElementsByClassName("endemic");
    else if (query2 === "extinct") special = document.getElementById("tree").getElementsByClassName("extinct");
    else if (query2 === "hypothetical") special = document.getElementById("tree").getElementsByClassName("hy");
    else if (query2 === "vagrant") special = document.getElementById("tree").getElementsByClassName("va");
    else if (query2 === "incertae") special = document.getElementById("tree").getElementsByClassName("ince");

    for (var k = 0; k < special.length; k++) {

      if (special[k].parentNode.parentNode.parentNode.cloned !== true) {

        matches[j++] = special[k].parentNode.parentNode.parentNode.cloneNode(true);
        special[k].parentNode.parentNode.parentNode.cloned = true;
      }
      matches[j++] = special[k].parentNode.cloneNode(true);
    }
  }
  else {

    query2 = query2.replace(/^\s+|\s+$/g, "");


    query2 = query2.replace(/n/g, "(n|Ã±)");
    query2 = query2.replace(/a/g, "(a|Ã£)");

    query2 = query2.replace(/Ãº/g, "u");
    query2 = query2.replace(/Ã¡/g, "a");
    query2 = query2.replace(/Ã³/g, "o");
    query2 = query2.replace(/Ã­/g, "i");
    query2 = query2.replace(/Ã§/g, "c");

    query2 = query2.replace(/\s+/g, "\\s+");

    if (query2) {
      query = query2;
    }
    else {
      query = searchInput.value.replace(/^\s+|\s+$/g, "");
      if (query === "type here") warning = true;
      else if (query === "") warning = true;
    }

    if (warning) {
      searchResults.innerHTML = "<li></li><li> &nbsp; &nbsp; no search term entered</li><li></li>";

      if (!resultsPanelOpen) toggleSearchResultsPanel();

      resetSearchResultsHeight();
      return;
    }

    var pattern = new RegExp(query, "i");



    for (i = 0; i < sL; i++) {

      entry = species[i];
      eClass = entry.className;
      var eParPar = entry.parentNode.parentNode;



      if (eClass) {  

        if (entry.firstChild.firstChild.textContent.match(pattern) || entry.firstChild.lastChild.textContent.match(pattern)) {
          entry.cloned = true;
          matches[j++] = entry.cloneNode(true);
        }
      }

      else {  

        if (entry.firstChild.textContent.match(pattern) || entry.childNodes[1].textContent.match(pattern)) {

          if (eParPar.cloned !== true) {
            matches[j++] = eParPar.cloneNode(true);
            eParPar.cloned = true;
          }
          matches[j++] = entry.cloneNode(true);
        }
      }
    }
  }

  if (matches.length === 0) {
    searchResults.innerHTML = "<li></li><li> &nbsp; &nbsp; no matching results found</li><li></li>";

    if (!resultsPanelOpen) toggleSearchResultsPanel();

    resetSearchResultsHeight();

    return;
  }

  var z;
  var matchClass;
  var list = "";

  for (k = 0; k < matches.length; k++) {

    matchClass = matches[k].className;


    if (matchClass === "family" || matchClass === "familyOpen") {

      list += "<li class='family'><span class='fco'>";
      list += matches[k].firstChild.firstChild.textContent + "</span><span class='fsc'>";


      list += (matches[k].firstChild.lastChild) ? matches[k].firstChild.childNodes[1].textContent : " ";
      list += "</span></li>";

      if (matches.length === 1) {
        for (z = 0; z < matches[0].children[1].children.length; z++) {

          list += "<li data-i='" + matches[0].children[1].children[z].getAttribute("data-i") + "' class='bird'>" + matches[0].children[1].children[z].innerHTML + "</li>";
        }
        numFound = z;
      }
    }  

    else if (matchClass === "fsc") {   }

    else {
      matches[k].style.textShadow = "none";  
      list += "<li data-i='" + matches[k].getAttribute("data-i") + "' class='bird'>" + matches[k].innerHTML + "</li>";
      numFound++;
    }
  }

  searchResults.innerHTML = list;

  if (!resultsPanelOpen) toggleSearchResultsPanel();


  if (currentCountry === "Falklands") {
    document.getElementById("searchTerm").innerHTML = "Malvinas/Falklands" + " : '<span>" + lastQuery + "</span>'&nbsp;&nbsp;   [ " + numFound + " species ]";
  }
  else {
    document.getElementById("searchTerm").innerHTML = currentCountry + " : '<span>" + lastQuery + "</span>'&nbsp;&nbsp;&nbsp;   [ " + numFound + " species ]";
  }

  resetSearchResultsHeight();



}

function resetSearchResultsHeight() {

  searchResults.style.height = "auto";

  simpleBarResults = new SimpleBar(document.getElementById("searchResults"), { autoHide: false });

  var elem;

  if (searchResults.scrollHeight >= 300) {
    searchResults.style.height = "25rem";
    elem = simpleBarResults.getScrollElement();
    elem.style.height = "25rem";
  }
  else {
    searchResults.style.height = searchResults.scrollHeight + "px";
    elem = simpleBarResults.getScrollElement();
    elem.style.height = searchResults.scrollHeight + "px";
  }

}

function resetTaxPageHeight() {

  simpleBarTaxPage = new SimpleBar(taxPage, { autoHide: false });

  var elem;

  taxPage.style.height = "75vh";
  elem = simpleBarTaxPage.getScrollElement();
  elem.style.height = "75vh";

  simpleBarTaxPage.recalculate();
}

function gotoMatch(e) {

  currentMap.querySelector(".colorKey").style.opacity = "0.9";

  if (lastSpecies && lastSpecies.classList.contains("active")) {
    lastSpecies.classList.remove("active");
  }

  var ev = e || window.event;  
  var clicked = ev.target;


  var clickedPar = clicked.parentNode;
  var clickedClass = clicked.className;

  if (clicked.className.indexOf("simplebar") !== -1) return;
  if (clicked.className.indexOf("fadeIn") !== -1) return;

  if (clicked.textContent.replace(/^\s+|\s+$/g, "") === "no matching results found") return;
  else if (clicked.textContent.replace(/^\s+|\s+$/g, "") === "no search term entered") return;
  else if (clicked.textContent.replace(/^\s+|\s+$/g, "") === "search results will appear here") return;
  else if (clicked.textContent.replace(/^\s+|\s+$/g, "") === "") return;

  if (clickedClass === "family") {
    clicked = ev.target;
  }
  else if (clickedClass === "fco") {
    clicked = clickedPar;
    clickedClass = "family";
  }
  else if (clickedClass === "fsc") {
    clicked = clickedPar;
    clickedClass = "family";
  }
  else if (clickedClass.match(/co/) !== null) {
    clicked = clickedPar;
  }
  else if (clickedClass === "bird") {
    clicked = ev.target;
  }
  else {
    clicked = clickedPar;
  }

  var sLen = species.length;
  var entry;
  var elem;
  var eText = clicked.textContent;

  for (var i = 0; i < sLen; i++) {

    entry = species[i];

    var entryTextTrimmed = entry.textContent.split("\n")[0];
    if (entryTextTrimmed === eText && clickedClass !== "family") {

      var familyTemp = entry.parentNode;

      if (!familyTemp.classList.contains("open")) {

        familyTemp.classList.add("open");
        familyTemp.parentNode.className = "familyOpen";
      }


      elem = simpleBarTaxPage.getScrollElement();

      elem.scrollTop = familyTemp.parentNode.offsetTop + entry.offsetTop - 100;

      entry.className = "active";

      lastSpecies = entry;
      lastIndex = Number(entry.getAttribute("data-i"));
      highlightSAMmap(lastIndex, "currentMap");

      if (lastResultsSpecies) lastResultsSpecies.classList.toggle("active");

      clicked.classList.toggle("active");
      lastResultsSpecies = clicked;
      addBirdNameToMap(entry);
      break;
    }




    else if (entryTextTrimmed === eText && clickedClass === "family") {

      elem = simpleBarTaxPage.getScrollElement();
      elem.scrollTop = entry.offsetTop;


      lastSpecies = entry.firstChild;
      lastSpecies.classList.toggle("active");

      if (lastResultsSpecies) {
        lastResultsSpecies.classList.toggle("active");
        lastResultsSpecies = null;
      }
      break;
    }
  }
}

function addBirdNameToMap(name) {

  var temp = "";

  if (name) {
    temp = "<span>" + name.firstChild.textContent + "</span><br/><span>" + name.lastChild.textContent + "</span>";
    document.getElementById("currentBirdName").innerHTML = temp;
  }
  else {
    document.getElementById("currentBirdName").innerHTML = temp;
  }
}


function toggleFamilyOpen(event) {

  if (event.target.className.indexOf("simplebar") !== -1) return;

  if (event.target.id === "taxPage") return;

  if (!numFamilies) return;

  document.querySelector(".colorKey").style.opacity = "0.9";

  event = event || window.event;  
  var familyTarget;
  var thisSpecies = event.target;
  var speciesClass = thisSpecies.className;

  if (speciesClass === "family" || speciesClass === "familyOpen") {
    familyTarget = event.target.childNodes[1].nextSibling;
  }
  else if (speciesClass === "fco") {
    familyTarget = event.target.parentNode.nextSibling.nextSibling;
  }
  else if (speciesClass === "fsc") {
    familyTarget = event.target.parentNode.nextSibling.nextSibling;
  }
  else if (speciesClass === "fTitle" || speciesClass === "fTitle active") {
    familyTarget = event.target.nextSibling.nextSibling;
  }

  if (familyTarget && !familyTarget.classList.contains("open")) {

    familyTarget.classList.add("open");

    familyTarget.parentNode.className = "familyOpen";





    var taxPageHeight = taxPage.getBoundingClientRect().height;

    if (familyTarget.offsetTop - taxPage.scrollTop > taxPageHeight - 24) {


      if (familyTarget.parentNode.clientHeight > taxPageHeight)
        taxPage.scrollTop = familyTarget.parentNode.offsetTop;

      else
        taxPage.scrollTop += familyTarget.lastElementChild.offsetTop + familyTarget.lastElementChild.clientHeight;
    }
    var scientificFamily = familyTarget.parentNode.firstChild.children[1].textContent;
    if (!scientificFamily) scientificFamily = familyTarget.parentNode.firstChild.children[0].textContent;

    document.querySelector("#treeIntroText").innerHTML = currentCountry + "  &nbsp; : &nbsp; " + scientificFamily + " has " + familyTarget.children.length + " species";
  }

  else if (familyTarget) {
    familyTarget.classList.remove("open");
    familyTarget.parentNode.className = "family";

    var reset = familyTarget.parentNode.querySelectorAll(".active");

    if (reset.length) {
      reset[0].classList.remove("active");
    }
    document.querySelector("#treeIntroText").innerHTML = currentCountry + "   &nbsp; : &nbsp; " + numFamiliesList[currentCountry] + " families, " + numSpeciesList[currentCountry] + " species";
  }
  if (!familyTarget) {


    if (thisSpecies.parentNode.classList.contains("birds")) {
      thisSpecies = thisSpecies.firstChild;
    }

    thisSpecies.parentNode.className = "active";

    if (thisSpecies.parentNode !== lastSpecies) {

      if (lastSpecies && lastSpecies.classList.contains("active")) {
        lastSpecies.classList.remove("active");
      }
    }

    lastSpecies = thisSpecies.parentNode;
    if (lastResultsSpecies) lastResultsSpecies.classList.toggle("active");
    lastResultsSpecies = null;

    addBirdNameToMap(thisSpecies.parentNode);

    lastIndex = Number(thisSpecies.parentNode.getAttribute("data-i"));
    highlightSAMmap(lastIndex, "currentMap");

    document.querySelector("#treeIntroText").innerHTML = currentCountry + "   &nbsp; : &nbsp; " + numFamiliesList[currentCountry] + " families, " + numSpeciesList[currentCountry] + " species *";
  }

  taxPage.style.zIndex = 5;
}

function closeAllFamilies() {

  var openedFamilies = taxPage.querySelectorAll("#tree .familyOpen ul");
  var len = openedFamilies.length;

  for (var i = 0; i < len; i++) {

    openedFamilies[i].classList.remove("open");
    openedFamilies[i].classList.add("closed");

    openedFamilies[i].parentNode.className = "family";
  }
  document.querySelector("#treeIntroText").innerHTML = currentCountry + "   &nbsp; : " + numFamiliesList[currentCountry] + " families, " + numSpeciesList[currentCountry] + " species *";
}

function printElem (evt) {

  var divId = evt.target.id;
  if (divId === "printerButton" || evt.target.nodeName === "use") divId = "searchResults";

  var content = document.getElementById(divId).children[2].innerHTML;
  var numSpecies = document.getElementsByClassName("bird").length;

  var html = '<html><head><title></title><head>';

    var css = "<style>";
  css += ".simplebar-content { list-style-type: none; padding: 0 0 0 40px; }"
  css += "h3 { margin: 0 0 3ch 0; text-align: center; }";
  css += ".family, .familyOpen { margin: 2ch 0 0.5ch -2.5ch; list-style-type: disc; }";
  css += ".fsc { position: absolute; left: 50%; }";
  css += ".bird>span { padding-left: 10px;}";
  css += ".bird span:last-child { position: absolute; left: 50%; }";
  css += "</style>";
  html += css;



    html += '</head><body>';
  html += '<h3>' + currentCountry + ' : &nbsp;\'' + lastQuery + '\'  &nbsp;&nbsp;' + numSpecies + ' species</h3>';
  html += content;
  html += '</body></html>';

  var printWindow = window.open('_blank', 'Print', 'menubar=yes,scroll=yes,height=600,width=800');

  printWindow.document.write(html);

  setTimeout(function() {
    printWindow.print();
    printWindow.close();
   }, 1000);

  return true;
}
"use strict";

var deleteMapButton;
var saveMapButton;
var mapsCollection;
var deleteAllMapsButton;

var currentID = 0;


document.addEventListener("DOMContentLoaded", function () {
  saveMapButton = document.querySelector(".saveMapButton");
  saveMapButton.addEventListener("click", saveCurrentMap);
  mapsCollection = document.getElementById("mapsCollection");

  deleteAllMapsButton = document.getElementById("deleteAllMapsButton");

  deleteAllMapsButton.addEventListener("click", deleteAllMaps);

  deleteAllMapsButton.addEventListener("mouseenter", function () {

    var mouseenterEvent = new Event('mouseenter');
    var numMaps = mapsCollection.children.length - 1;

    for (var index = 0; index < numMaps; index++) {
      mapsCollection.children[numMaps - index].children[1].dispatchEvent(mouseenterEvent);
    }
  }, false);

  deleteAllMapsButton.addEventListener("mouseleave", function () {

    var mouseleaveEvent = new Event('mouseleave');
    var numMaps = mapsCollection.children.length - 1;

    for (var index = 0; index < numMaps; index++) {
      mapsCollection.children[numMaps - index].children[1].dispatchEvent(mouseleaveEvent);
    }
  }, false);

});

function revealMapsCollection() {

  mapsCollection.classList.toggle("open");
  map.classList.toggle("shiftUp");
}

function deleteMap(evt)  {

  evt.stopPropagation();

  map.querySelector(".saveMapButton").style.display = "block";
  var len = mapsCollection.getElementsByClassName("smallBird").length;

  if (len === 1) {
    deleteAllMaps(evt);
  }
  else {
    var birdInstance = this.parentNode;
    birdInstance.parentNode.removeChild(this.parentNode);
    map.querySelector(".saveMapButton").style.display = "block";

    repositionChildMaps(len-1);
  }
}

function saveCurrentMap()  {

  var len = mapsCollection.getElementsByClassName("smallBird").length;
  if (len === 5)  return;


  var thisInstance = map.children[0];

  var dupNode = thisInstance.cloneNode(true);
  dupNode.classList.remove("birdMapInstance");
  dupNode.classList.add("smallBird");

  dupNode.querySelector(".birdName").classList.add("smallBirdText");

  dupNode.querySelector(".colorKey").style.display = "none";

  dupNode.querySelector(".birdName").removeAttribute("id");
  dupNode.querySelector(".smallBirdText").classList.remove("birdName");

  dupNode.querySelector(".drawing").removeAttribute("id");

  dupNode.querySelector(".drawing").firstElementChild.setAttribute("id", "thin" + currentID);

  dupNode.removeAttribute("id");

  mapsCollection.appendChild(dupNode);
  len = mapsCollection.getElementsByClassName("smallBird").length;

  if (len === 1) {
    mapsCollection.addEventListener("click", revealMapsCollection);
    mapsCollection.classList.add("namesOnlySeen");

    deleteAllMapsButton.addEventListener("click", deleteAllMaps);
  }
  else if (len === 5)  {
    map.querySelector(".saveMapButton").style.display = "none";
  }

  repositionChildMaps(len);

  deleteMapButton = dupNode.querySelector(".deleteMapButton");
  deleteMapButton.addEventListener("click", deleteMap);

  deleteMapButton.addEventListener("mouseenter", function () {
    this.classList.add("hover");
  });

  deleteMapButton.addEventListener("mouseleave", function () {
    this.classList.remove("hover");
  });


  document.getElementById("thin" + currentID).onload = function () {

    highlightSAMmap(lastIndex, "thin" + currentID);
    mapsCollection.lastChild.style.opacity = "1";
    currentID++;
  };
}

function repositionChildMaps(numChildren) {

  var smallMaps = mapsCollection.getElementsByClassName("smallBird");

  switch (numChildren) {

  case 1:
    smallMaps[0].style.left = "45vw";
    break;

  case 2:
    smallMaps[0].style.left = "34vw";
    smallMaps[1].style.left = "41vw";
    break;

  case 3:
    smallMaps[0].style.left = "26vw";
    smallMaps[1].style.left = "30.25vw";
    smallMaps[2].style.left = "34.5vw";
    break;

  case 4:
    smallMaps[0].style.left = "21vw";
    smallMaps[1].style.left = "24vw";
    smallMaps[2].style.left = "27vw";
    smallMaps[3].style.left = "30vw";
    break;

  case 5:
    smallMaps[0].style.left = "17vw";
    smallMaps[1].style.left = "20vw";
    smallMaps[2].style.left = "23vw";
    smallMaps[3].style.left = "26vw";
    smallMaps[4].style.left = "29vw";
    break;

  default:
    break;
  }
}

function deleteAllMaps(evt) {

  evt.stopPropagation();

  revealMapsCollection();  

  var maps = mapsCollection.getElementsByClassName("smallBird");
  var len = maps.length;

  for (var i = 1; i <= len; i++) {

        mapsCollection.removeChild(mapsCollection.childNodes[3]);
  }

  mapsCollection.classList.remove("namesOnlySeen");
  mapsCollection.removeEventListener("click", revealMapsCollection);
  deleteAllMapsButton.removeEventListener("click", deleteAllMaps);

  map.querySelector(".saveMapButton").style.display = "block";
}